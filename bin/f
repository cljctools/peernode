#!/bin/bash

clean(){
    rm -rf resources/public/js-out out
}

purge(){
    clean
    rm -rf  .shadow-cljs .cpcache 
}

shadow(){
    ./node_modules/.bin/shadow-cljs "$@"
}

server(){
    shadow -A:dev server
    # yarn server
}

dev(){

    npm i
    shadow -A:dev watch :main

}

compile(){
    npm i
    shadow -A:dev compile  :main
}

release(){
    npm i
    shadow -A:dev release  :main
}

js_ipfs_install(){
    cd /ctx/js-ipfs
    npm i
    ./node_modules/.bin/lerna bootstrap
}

main(){
    npm i
    compile
    js_ipfs_install
    daemon
}

start(){
    cd /ctx/js-ipfs/packages/ipfs
    bash init-and-daemon.sh
}

tree(){
    clojure -A:dev -Stree
}


cljs_compile(){
    clj -A:dev -m cljs.main -co cljs-build.edn -c
    #  clj -A:dev -m cljs.main -co cljs-build.edn -v -c # -r
}


dock() {

    IMAGE=cljctools.peernode
    NAME=peernode
    # NETWORK=deathstar
    REPL_PORT=8899
  
    docker build \
      -t $IMAGE \
      --build-arg workdir=/ctx/peernode/bin \
      -f Dockerfile .
    
    # docker network create $NETWORK
    # xhost +

    docker run  --rm \
                --cpus=4.0 \
                --memory=8g \
                --name $NAME \
                -it \
                -e IPFS_PATH=/root/.jsipfs \
                -p $REPL_PORT:8899 \
                -v "$(pwd)/.user":/root \
                -v "$(cd ../../ && pwd)/":/ctx \
                 $IMAGE \
                 bash
}

into(){
    docker exec -it peernode /bin/bash
}

"$@"